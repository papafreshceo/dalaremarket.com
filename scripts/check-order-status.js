// Ï£ºÎ¨∏ ÏÉÅÌÉú ÌôïÏù∏ Ïä§ÌÅ¨Î¶ΩÌä∏
const { createClient } = require('@supabase/supabase-js');
const path = require('path');

require('dotenv').config({ path: path.join(__dirname, '..', '.env.local') });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Supabase ÌôòÍ≤Ω Î≥ÄÏàòÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkOrders() {
  console.log('üîç Ï£ºÎ¨∏ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë...\n');

  try {
    // 1. Ï†ÑÏ≤¥ Ï£ºÎ¨∏ Ï°∞Ìöå
    const { data: allOrders, error: allError } = await supabase
      .from('integrated_orders')
      .select('id, order_number, shipping_status, seller_id, market_name, is_deleted')
      .eq('is_deleted', false)
      .order('id', { ascending: false })
      .limit(20);

    if (allError) {
      console.error('‚ùå Ï°∞Ìöå Ïò§Î•ò:', allError);
      return;
    }

    console.log('üìä ÏµúÍ∑º Ï£ºÎ¨∏ 20Í±¥:');
    console.log('‚îÄ'.repeat(100));
    allOrders.forEach(order => {
      console.log(`ID: ${order.id} | Ï£ºÎ¨∏Î≤àÌò∏: ${order.order_number || 'N/A'} | ÏÉÅÌÉú: ${order.shipping_status || 'NULL'} | ÏÖÄÎü¨ID: ${order.seller_id ? 'O' : 'X'} | ÎßàÏºì: ${order.market_name || 'N/A'}`);
    });

    // 2. ÏÉÅÌÉúÎ≥Ñ ÌÜµÍ≥Ñ
    console.log('\nüìà ÏÉÅÌÉúÎ≥Ñ ÌÜµÍ≥Ñ:');
    console.log('‚îÄ'.repeat(100));

    const statusCount = {};
    allOrders.forEach(order => {
      const status = order.shipping_status || 'NULL';
      statusCount[status] = (statusCount[status] || 0) + 1;
    });

    Object.entries(statusCount).forEach(([status, count]) => {
      console.log(`  ${status}: ${count}Í±¥`);
    });

    // 3. seller_idÍ∞Ä ÏûàÎäî 'Î∞úÏ£ºÏÑúÎì±Î°ù' ÏÉÅÌÉú Ï£ºÎ¨∏ ÌôïÏù∏
    console.log('\nüéØ seller_idÍ∞Ä ÏûàÎäî Î∞úÏ£ºÏÑúÎì±Î°ù ÏÉÅÌÉú Ï£ºÎ¨∏:');
    console.log('‚îÄ'.repeat(100));

    const { data: registeredOrders, error: regError } = await supabase
      .from('integrated_orders')
      .select('id, order_number, shipping_status, seller_id, market_name')
      .eq('is_deleted', false)
      .eq('shipping_status', 'Î∞úÏ£ºÏÑúÎì±Î°ù')
      .not('seller_id', 'is', null);

    if (regError) {
      console.error('‚ùå Ï°∞Ìöå Ïò§Î•ò:', regError);
    } else if (registeredOrders.length === 0) {
      console.log('  ‚ö†Ô∏è  Î∞úÍ≤¨Îêú Ï£ºÎ¨∏ ÏóÜÏùå');
    } else {
      console.log(`  ‚úÖ Ï¥ù ${registeredOrders.length}Í±¥ Î∞úÍ≤¨:`);
      registeredOrders.forEach(order => {
        console.log(`    - ID: ${order.id} | Ï£ºÎ¨∏Î≤àÌò∏: ${order.order_number} | ÏÖÄÎü¨ID: ${order.seller_id}`);
      });
    }

    // 4. seller_idÍ∞Ä ÏûàÎäî Î™®Îì† Ï£ºÎ¨∏ ÏÉÅÌÉú ÌôïÏù∏
    console.log('\nüì¶ seller_idÍ∞Ä ÏûàÎäî Ï£ºÎ¨∏Îì§Ïùò ÏÉÅÌÉú:');
    console.log('‚îÄ'.repeat(100));

    const { data: sellerOrders, error: sellerError } = await supabase
      .from('integrated_orders')
      .select('id, order_number, shipping_status, seller_id, market_name')
      .eq('is_deleted', false)
      .not('seller_id', 'is', null)
      .limit(10);

    if (!sellerError && sellerOrders) {
      const sellerStatusCount = {};
      sellerOrders.forEach(order => {
        const status = order.shipping_status || 'NULL';
        sellerStatusCount[status] = (sellerStatusCount[status] || 0) + 1;
      });

      Object.entries(sellerStatusCount).forEach(([status, count]) => {
        console.log(`  ${status}: ${count}Í±¥`);
      });
    }

  } catch (error) {
    console.error('‚ùå Ïò§Î•ò:', error);
  }
}

checkOrders();
