// 이 파일은 page.tsx에 추가해야 할 코드입니다

// 1. Import 추가 (line 12 다음에)
import ValidationErrorModal from './modals/ValidationErrorModal';

// 2. State 추가 (line 31 다음에)
const [validationErrors, setValidationErrors] = useState<string[]>([]);
const [showValidationModal, setShowValidationModal] = useState<boolean>(false);

// 3. 검증 함수 추가 (handleDrop 함수 전에, line 143 전에)
// 필수 칼럼 검증 함수
const validateRequiredColumns = (data: any[]): string[] => {
  const errors: string[] = [];

  data.forEach((row: any, index: number) => {
    const rowNumber = index + 2; // 엑셀 행 번호 (헤더 제외, 1부터 시작)

    // 수령인 검증
    if (!row['수령인'] || String(row['수령인']).trim() === '') {
      errors.push(`${rowNumber}번째 주문건의 '수령인' 값이 누락되었습니다`);
    }

    // 수령인전화번호 검증
    if (!row['수령인전화번호'] || String(row['수령인전화번호']).trim() === '') {
      errors.push(`${rowNumber}번째 주문건의 '수령인전화번호' 값이 누락되었습니다`);
    }

    // 주소 검증
    if (!row['주소'] || String(row['주소']).trim() === '') {
      errors.push(`${rowNumber}번째 주문건의 '주소' 값이 누락되었습니다`);
    }

    // 옵션명 또는 옵션코드 검증 (둘 중 하나는 반드시 있어야 함)
    const hasOptionName = row['옵션명'] && String(row['옵션명']).trim() !== '';
    const hasOptionCode = row['옵션코드'] && String(row['옵션코드']).trim() !== '';
    if (!hasOptionName && !hasOptionCode) {
      errors.push(`${rowNumber}번째 주문건의 '옵션명' 또는 '옵션코드' 값이 누락되었습니다`);
    }

    // 수량 검증
    if (!row['수량'] || String(row['수량']).trim() === '') {
      errors.push(`${rowNumber}번째 주문건의 '수량' 값이 누락되었습니다`);
    }
  });

  return errors;
};

// 4. handleFiles 함수 수정 (line 166 다음에 추가)
// 필수 칼럼 검증
const errors = validateRequiredColumns(jsonData);
if (errors.length > 0) {
  setValidationErrors(errors);
  setShowValidationModal(true);
  setShowUploadModal(false);
  return;
}

// 5. 모달 컴포넌트 추가 (OrderDetailModal 다음, line 583 다음)
<ValidationErrorModal
  show={showValidationModal}
  onClose={() => setShowValidationModal(false)}
  errors={validationErrors}
/>
