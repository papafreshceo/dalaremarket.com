// app/admin/products/option-products/create/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { createClient } from '@/lib/supabase/client'
import { Button } from '@/components/ui'
import { PageLayout, Card } from '@/components/layouts'

export default function CreateOptionProductPage() {
  const router = useRouter()
  const supabase = createClient()

  const [formData, setFormData] = useState({
    option_name: '',
    item_type: '',
    variety: '',
    weight: '',
    weight_unit: 'kg',
    packaging_box_price: '0',
    cushioning_price: '0',
    labor_cost: '1000',
    shipping_fee: '3000',
    status: '',
    vendor_id: ''
  })

  const [rawMaterials, setRawMaterials] = useState<any[]>([])
  const [vendors, setVendors] = useState<any[]>([])
  const [supplyStatuses, setSupplyStatuses] = useState<any[]>([])
  const [materialSearch, setMaterialSearch] = useState('')
  const [selectedMaterial, setSelectedMaterial] = useState<any>(null)
  const [subdivisionQuantity, setSubdivisionQuantity] = useState<number>(1)

  useEffect(() => {
    fetchData()
  }, [])

  const fetchData = async () => {
    const { data: materials } = await supabase.from('raw_materials').select('*').eq('is_active', true)
    const { data: vendorData } = await supabase.from('partners').select('*').eq('is_active', true)
    const { data: statuses } = await supabase
      .from('supply_status_settings')
      .select('*')
      .eq('status_type', 'optional_product')
      .eq('is_active', true)
      .order('display_order')

    if (materials) setRawMaterials(materials)
    if (vendorData) setVendors(vendorData)
    if (statuses) setSupplyStatuses(statuses)
  }

  const handleSave = async () => {
    try {
      if (!selectedMaterial) {
        alert('원물을 선택해주세요.')
        return
      }
      if (!formData.option_name) {
        alert('상품명을 입력하세요.')
        return
      }

      // 원물 비용 계산
      const rawMaterialCost = selectedMaterial && subdivisionQuantity
        ? ((subdivisionQuantity / selectedMaterial.standard_quantity) * selectedMaterial.latest_price)
        : 0

      const productData = {
        ...formData,
        option_code: `OPT${Date.now()}`,
        weight: formData.weight ? Number(formData.weight) : null,
        packaging_box_price: Number(formData.packaging_box_price),
        cushioning_price: Number(formData.cushioning_price),
        labor_cost: Number(formData.labor_cost),
        shipping_fee: Number(formData.shipping_fee),
        raw_material_cost: rawMaterialCost
      }

      const { data: newProduct, error: productError } = await supabase
        .from('option_products')
        .insert([productData])
        .select()
        .single()

      if (productError) throw productError

      // 원물 연결 정보 저장
      if (selectedMaterial && newProduct) {
        await supabase.from('option_product_materials').insert([{
          option_product_id: newProduct.id,
          raw_material_id: selectedMaterial.id,
          quantity: subdivisionQuantity,
          unit_price: selectedMaterial.latest_price
        }])
      }

      alert('저장되었습니다.')
      router.push('/admin/products/option-products')
    } catch (e) {
      console.error(e)
      alert('저장 중 오류가 발생했습니다.')
    }
  }

  const filteredMaterials = rawMaterials.filter(m =>
    m.material_name?.toLowerCase().includes(materialSearch.toLowerCase()) ||
    m.category_4?.toLowerCase().includes(materialSearch.toLowerCase()) ||
    m.category_5?.toLowerCase().includes(materialSearch.toLowerCase())
  )

  return (
    <PageLayout
      title="옵션상품 생성"
      showBack
      actions={<>
        <Button variant="outline" size="xs" onClick={() => router.back()}>취소</Button>
        <Button size="xs" onClick={handleSave}>저장</Button>
      </>}
    >
      <div className="grid grid-cols-2 gap-4">
        {/* 왼쪽: 원물 선택 */}
        <Card>
          <h2 className="text-sm font-semibold mb-3" style={{ color: '#1d4ed8' }}>1. 원물 선택</h2>

          <div className="space-y-3">
            <input
              type="text"
              value={materialSearch}
              onChange={(e) => setMaterialSearch(e.target.value)}
              placeholder="원물명, 품목, 품종으로 검색..."
              className="w-full border border-blue-200 rounded-lg px-3 py-2 text-sm focus:outline-none focus:border-blue-500"
              autoFocus
            />

            {materialSearch && filteredMaterials.length > 0 && (
              <div className="max-h-64 overflow-y-auto border border-blue-200 rounded-lg bg-white">
                {filteredMaterials.map(m => (
                  <button
                    key={m.id}
                    type="button"
                    onClick={() => {
                      setSelectedMaterial(m)
                      setMaterialSearch('')
                      setSubdivisionQuantity(m.standard_quantity || 1)
                      setFormData({
                        ...formData,
                        item_type: m.category_4 || '',
                        variety: m.category_5 || '',
                        weight: m.standard_quantity?.toString() || '',
                        weight_unit: m.standard_unit || 'kg'
                      })
                    }}
                    className="w-full text-left px-3 py-2 hover:bg-blue-50 border-b last:border-b-0 transition-colors"
                  >
                    <div className="text-xs font-medium text-gray-900">{m.material_name}</div>
                    <div className="text-[10px] text-gray-600 mt-0.5">
                      {m.category_4} {m.category_5 && `/ ${m.category_5}`} · {m.standard_quantity}{m.standard_unit} · {m.latest_price?.toLocaleString()}원
                    </div>
                  </button>
                ))}
              </div>
            )}

            {selectedMaterial && (
              <div className="bg-blue-50 border border-blue-200 p-3 rounded-lg space-y-2">
                <div className="flex justify-between items-start">
                  <div>
                    <div className="font-semibold text-xs text-gray-900">{selectedMaterial.material_name}</div>
                    <div className="text-[10px] text-gray-600 mt-0.5">
                      기준: {selectedMaterial.standard_quantity}{selectedMaterial.standard_unit} / {selectedMaterial.latest_price?.toLocaleString()}원
                    </div>
                  </div>
                  <button
                    onClick={() => {
                      setSelectedMaterial(null)
                      setSubdivisionQuantity(1)
                    }}
                    className="text-red-500 hover:text-red-600 text-xs font-medium"
                  >
                    ✕
                  </button>
                </div>

                <div className="space-y-1.5">
                  <label className="text-[10px] font-medium text-gray-700">소분 단위 (몇 {selectedMaterial.standard_unit}씩?)</label>
                  <div className="flex items-center gap-2">
                    <input
                      type="number"
                      step="0.1"
                      value={subdivisionQuantity}
                      onChange={(e) => setSubdivisionQuantity(Number(e.target.value))}
                      className="flex-1 border border-blue-200 rounded-lg px-2 py-1.5 text-xs focus:outline-none focus:border-blue-500"
                    />
                    <span className="text-xs text-gray-600 min-w-[30px]">{selectedMaterial.standard_unit}</span>
                  </div>
                  <div className="text-[10px] text-gray-600 bg-white p-1.5 rounded">
                    → 1개당: {subdivisionQuantity}{selectedMaterial.standard_unit} / <span className="font-semibold text-blue-600">{((subdivisionQuantity / selectedMaterial.standard_quantity) * selectedMaterial.latest_price).toLocaleString()}원</span>
                  </div>
                </div>
              </div>
            )}
          </div>
        </Card>

        {/* 오른쪽: 상세 정보 */}
        <Card>
          <h2 className="text-sm font-semibold mb-3" style={{ color: '#1d4ed8' }}>2. 상세 정보</h2>

          <div className="space-y-3">
            <div>
              <label className="block text-xs font-semibold text-gray-700 mb-1">상품명 *</label>
              <input
                type="text"
                value={formData.option_name}
                onChange={(e) => setFormData({ ...formData, option_name: e.target.value })}
                placeholder="예: 복숭아 1.3kg 8과"
                className="w-full border border-blue-200 rounded-lg px-3 py-2 text-sm focus:outline-none focus:border-blue-500"
              />
            </div>

            <div className="grid grid-cols-3 gap-2">
              <div>
                <label className="block text-xs font-semibold text-gray-700 mb-1">품목</label>
                <input
                  type="text"
                  value={formData.item_type}
                  onChange={(e) => setFormData({ ...formData, item_type: e.target.value })}
                  className="w-full border border-blue-200 rounded-lg px-2 py-1.5 text-xs focus:outline-none focus:border-blue-500"
                />
              </div>
              <div>
                <label className="block text-xs font-semibold text-gray-700 mb-1">품종</label>
                <input
                  type="text"
                  value={formData.variety}
                  onChange={(e) => setFormData({ ...formData, variety: e.target.value })}
                  className="w-full border border-blue-200 rounded-lg px-2 py-1.5 text-xs focus:outline-none focus:border-blue-500"
                />
              </div>
              <div>
                <label className="block text-xs font-semibold text-gray-700 mb-1">중량</label>
                <div className="flex gap-1">
                  <input
                    type="number"
                    step="0.1"
                    value={formData.weight}
                    onChange={(e) => setFormData({ ...formData, weight: e.target.value })}
                    className="flex-1 border border-blue-200 rounded-lg px-2 py-1.5 text-xs focus:outline-none focus:border-blue-500"
                  />
                  <select
                    value={formData.weight_unit}
                    onChange={(e) => setFormData({ ...formData, weight_unit: e.target.value })}
                    className="border border-blue-200 rounded-lg px-1 py-1.5 text-xs focus:outline-none focus:border-blue-500"
                  >
                    <option>kg</option>
                    <option>g</option>
                  </select>
                </div>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-2">
              <div>
                <label className="block text-xs font-semibold text-gray-700 mb-1">박스비</label>
                <input
                  type="number"
                  value={formData.packaging_box_price}
                  onChange={(e) => setFormData({ ...formData, packaging_box_price: e.target.value })}
                  className="w-full border border-blue-200 rounded-lg px-2 py-1.5 text-xs focus:outline-none focus:border-blue-500"
                />
              </div>
              <div>
                <label className="block text-xs font-semibold text-gray-700 mb-1">완충재</label>
                <input
                  type="number"
                  value={formData.cushioning_price}
                  onChange={(e) => setFormData({ ...formData, cushioning_price: e.target.value })}
                  className="w-full border border-blue-200 rounded-lg px-2 py-1.5 text-xs focus:outline-none focus:border-blue-500"
                />
              </div>
              <div>
                <label className="block text-xs font-semibold text-gray-700 mb-1">인건비</label>
                <input
                  type="number"
                  value={formData.labor_cost}
                  onChange={(e) => setFormData({ ...formData, labor_cost: e.target.value })}
                  className="w-full border border-blue-200 rounded-lg px-2 py-1.5 text-xs focus:outline-none focus:border-blue-500"
                />
              </div>
              <div>
                <label className="block text-xs font-semibold text-gray-700 mb-1">배송비</label>
                <input
                  type="number"
                  value={formData.shipping_fee}
                  onChange={(e) => setFormData({ ...formData, shipping_fee: e.target.value })}
                  className="w-full border border-blue-200 rounded-lg px-2 py-1.5 text-xs focus:outline-none focus:border-blue-500"
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-2">
              <div>
                <label className="block text-xs font-semibold text-gray-700 mb-1">상태</label>
                <select
                  value={formData.status}
                  onChange={(e) => setFormData({ ...formData, status: e.target.value })}
                  className="w-full border border-blue-200 rounded-lg px-2 py-1.5 text-xs focus:outline-none focus:border-blue-500"
                >
                  <option value="">선택</option>
                  {supplyStatuses.map(s => (
                    <option key={s.id} value={s.name}>{s.name}</option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-xs font-semibold text-gray-700 mb-1">벤더사</label>
                <select
                  value={formData.vendor_id}
                  onChange={(e) => setFormData({ ...formData, vendor_id: e.target.value })}
                  className="w-full border border-blue-200 rounded-lg px-2 py-1.5 text-xs focus:outline-none focus:border-blue-500"
                >
                  <option value="">선택</option>
                  {vendors.map(v => (
                    <option key={v.id} value={v.id}>{v.name}</option>
                  ))}
                </select>
              </div>
            </div>
          </div>
        </Card>
      </div>
    </PageLayout>
  )
}
