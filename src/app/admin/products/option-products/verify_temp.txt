  // 프론트엔드와 백엔드 계산 결과 검증
  const verifyPriceCalculations = async (beforeSave: Map<string, any>) => {
    const savedProducts = Array.from(beforeSave.keys()).map(id => products.find((p: any) => p.id === id)).filter(Boolean)

    const allChanges: Array<{
      optionCode: string
      optionName: string  
      changes: string[]
    }> = []

    for (const p of savedProducts) {
      const before = beforeSave.get((p as any)!.id)
      const { data: dbProduct } = await supabase.from('option_products').select('*').eq('id', (p as any)!.id).single()

      if (dbProduct && before) {
        const changes: string[] = []
        
        const checkField = (key: string, label: string, format: (v: any) => string, threshold?: number) => {
          const beforeVal = before[key]
          const afterVal = dbProduct[key]
          let hasChanged = false
          
          if (threshold !== undefined) {
            hasChanged = Math.abs((beforeVal || 0) - (afterVal || 0)) >= threshold
          } else {
            hasChanged = beforeVal !== afterVal
          }
          
          if (hasChanged) {
            changes.push(`${label}: ${format(beforeVal)} → ${format(afterVal)}`)
          }
        }

        checkField('option_code', '옵션코드', v => v || '')
        checkField('option_name', '옵션명', v => v || '')
        checkField('total_cost', '총원가', v => (v || 0).toLocaleString() + '원', 1)
        checkField('shipping_fee', '택배비', v => (v || 0).toLocaleString() + '원', 1)
        checkField('material_cost_policy', '원물가정책', v => v === 'auto' ? '자동' : '고정')
        checkField('seller_supply_price_mode', '셀러모드', v => v)
        checkField('naver_price_mode', '네이버모드', v => v)
        checkField('coupang_price_mode', '쿠팡모드', v => v)
        checkField('margin_calculation_type', '마진계산방식', v => v === 'rate' ? '마진율' : '마진액')
        checkField('target_seller_margin_rate', '목표셀러마진%', v => (v || 0) + '%', 0.1)
        checkField('target_margin_rate', '목표직판마진%', v => (v || 0) + '%', 0.1)
        checkField('target_margin_amount', '목표직판마진액', v => (v || 0).toLocaleString() + '원', 1)
        checkField('seller_supply_price', '셀러공급가', v => (v || 0).toLocaleString() + '원', 1)
        checkField('naver_paid_shipping_price', '네이버유료', v => (v || 0).toLocaleString() + '원', 1)
        checkField('naver_free_shipping_price', '네이버무료', v => (v || 0).toLocaleString() + '원', 1)
        checkField('coupang_paid_shipping_price', '쿠팡유료', v => (v || 0).toLocaleString() + '원', 1)
        checkField('coupang_free_shipping_price', '쿠팡무료', v => (v || 0).toLocaleString() + '원', 1)

        if (changes.length > 0) {
          allChanges.push({
            optionCode: dbProduct.option_code || '',
            optionName: dbProduct.option_name || '',
            changes
          })
        }
      }
    }

    setVerificationResults({ allChanges, hasChanges: allChanges.length > 0 })
  }
